name: APK builds

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3

      - uses: jirutka/setup-alpine@v1
        with:
          arch: aarch64
          packages: abuild autoconf sudo automake libtool ninja pkgconf make cmake openssl-dev ninja gcc g++ cmake-extras extra-cmake-modules build-base xz unzip gzip lzip openssh
          branch: v3.17

      - name: Setup environment for building
        run: |
          echo "%wheel ALL=(ALL) ALL" | tee /etc/sudoers.d/wheel
          adduser -D fakeshell
          adduser fakeshell wheel
          adduser fakeshell abuild
          wget -P /etc/apk/keys https://mirror.bardia.tech/alphybris/aarch64/fakeshell@bardia.tech-642c0d85.rsa.pub
        shell: alpine.sh --root {0}

      - name: Setup keyrings
        run: |
          mkdir keys
          echo "${{ secrets.APK_PRIVATE_KEY }}" > keys/fakeshell@bardia.tech-642c0d85.rsa
          cat /home/fakeshell/work/alphybrisaports/alphybrisaports/keys/fakeshell@bardia.tech-642c0d85.rsa
          wget -P keys https://mirror.bardia.tech/alphybris/aarch64/fakeshell@bardia.tech-642c0d85.rsa.pub
        shell: alpine.sh {0}

      - name: Add keyrings
        run: |
          mkdir /home/fakeshell/.abuild
          echo "PACKAGER_PRIVKEY=/home/fakeshell/work/alphybrisaports/alphybrisaports/keys/fakeshell@bardia.tech-642c0d85.rsa" | tee /home/fakeshell/.abuild/abuild.conf
        shell: alpine.sh {0}

      - name: Install pulseaudio's dependencies
        run: |
          apk add meson tdb-dev alsa-lib-dev libasyncns-dev dbus-dev glib-dev gtk+3.0-dev orc-dev orc-compiler libsndfile-dev soxr-dev libx11-dev libxcb-dev libice-dev libsm-dev libxtst-dev avahi-dev sbc-dev fftw-dev jack-dev openssl-dev speexdsp-dev eudev-dev libcap-dev bluez-dev check-dev libtool perl perl-xml-parser m4
        shell: alpine.sh --root {0}

      - name: Build pulseaudio
        run: |
          cd pulseaudio-hybris
          abuild -r
        shell: alpine.sh {0}

      - name: Install pulseaudio
        run: |
          apk del libpulse libpulse-mainloop-glib
          apk add /home/fakeshell/packages/alphybrisaports/$(arch)/libpulse-14.2-r5.apk
          apk add /home/fakeshell/packages/alphybrisaports/$(arch)/libpulse-mainloop-glib-14.2-r5.apk
          apk add /home/fakeshell/packages/alphybrisaports/$(arch)/pulseaudio-hybris-14.2-r5.apk
          apk add /home/fakeshell/packages/alphybrisaports/$(arch)/pulseaudio-hybris-alsa-14.2-r5.apk
          apk add /home/fakeshell/packages/alphybrisaports/$(arch)/pulseaudio-hybris-dev-14.2-r5.apk
        shell: alpine.sh --root {0}

      - name: Install the rest of the dependencies
        run: |
          apk add libglibutil-dev libx11-dev libxext-dev glproto alsa-lib-dev glib-dev gcr4-dev pango-dev libgudev-dev libhandy1-dev vala json-glib-dev gsound gobject-introspection qt5-qtbase-dev doxygen webrtc-audio-processing-dev mce-dev bluez-dev wayland-dev linux-headers bsd-compat-headers glib libpng-dev docbook-xsl eudev-dev mesa-dev dbus-glib mobile-broadband-provider-info gtest gtest-dev gmock yaml-cpp-dev gcovr libcap-dev libinput-dev elogind-dev dhcp net-tools tdb-dev dbus-dev orc-dev orc-compiler libsndfile-dev soxr-dev libxcb-dev libice-dev libsm-dev libxtst-dev avahi-dev sbc-dev fftw-dev jack-dev speexdsp-dev check-dev perl perl-xml-parser pixman-dev xcb-util-wm-dev xkeyboard-config xcb-util-image-dev wayland-protocols gsound-dev gi-docgen rstcheck gsettings-desktop-schemas-dev polkit-dev lcms2-dev libcanberra-dev libgweather4-dev libnotify-dev libwacom-dev modemmanager-dev networkmanager-dev upower-dev colord-dev cups-dev geoclue-dev geocode-glib-dev nss-dev aom-dev bzip2-dev curl-dev directfb-dev faac-dev faad2-dev fdk-aac-dev flite-dev glu-dev gobject-introspection-dev gsm-dev gst-plugins-base-dev gstreamer-dev libass-dev libdc1394-dev libde265-dev libdvdnav-dev libdvdread-dev libexif-dev libfreeaptx-dev libmms-dev libmodplug-dev libnice-dev librsvg-dev libsrtp-dev libusrsctp-dev libva-glx-dev libvdpau-dev libwebp-dev neon-dev openexr-dev openjpeg-dev opus-dev rtmpdump-dev soundtouch-dev spandsp-dev tiff-dev vo-aacenc-dev vo-amrwbenc-dev vulkan-headers x265-dev zbar-dev linux-pam-dev evince-dev gcr-dev gettext-dev libsecret-dev polkit-elogind-dev py3-docutils libxslt-dev libdrm-dev evolution-data-server-dev gnome-desktop-dev libadwaita-dev
        shell: alpine.sh --root {0}

      - name: Build pulsecore-headers
        run: |
          cd pulsecore-headers
          abuild -r
        shell: alpine.sh {0}

      - name: install pulsecore-headers
        run: |
          apk add /home/fakeshell/packages/alphybrisaports/$(arch)/pulsecore-headers*.apk
        shell: alpine.sh --root {0}

      - name: Build deviceinfo
        run: |
          cd deviceinfo
          abuild -r
        shell: alpine.sh {0}

      - name: install deviceinfo
        run: |
          apk add /home/fakeshell/packages/alphybrisaports/$(arch)/deviceinfo*.apk
        shell: alpine.sh --root {0}

      - name: Build android-headers-30
        run: |
          cd android-headers-api30
          abuild -r
        shell: alpine.sh {0}

      - name: install android-headers-30
        run: |
          apk add /home/fakeshell/packages/alphybrisaports/$(arch)/android-headers*.apk
        shell: alpine.sh --root {0}

      - name: Build libhybris
        run: |
          cd libhybris
          abuild -F -r
        shell: alpine.sh --root {0}

      - name: Install libhybris
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/libhybris*.apk
        shell: alpine.sh --root {0}

      - name: Build libgrilio
        run: |
          cd libgrilio
          abuild -r
        shell: alpine.sh {0}

      - name: Install libgrilio
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/libgrilio*.apk
        shell: alpine.sh --root {0}

      - name: Build libgbinder
        run: |
          cd libgbinder
          abuild -r
        shell: alpine.sh {0}

      - name: install libgbinder
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/libgbinder*.apk
        shell: alpine.sh --root {0}

      - name: Build libginder-radio
        run: |
          cd libgbinder-radio
          abuild -r
        shell: alpine.sh {0}

      - name: Install libgbinder-radio
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/libgbinder-radio*.apk
        shell: alpine.sh --root {0}

      - name: Build audiosystem-passthrough
        run: |
          cd audiosystem-passthrough
          abuild -r
        shell: alpine.sh {0}

      - name: Install audiosystem-passthrough
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/audiosystem-passthrough*.apk
        shell: alpine.sh --root {0}

      - name: Build callaudiod
        run: |
          cd callaudiod-hybris
          abuild -r
        shell: alpine.sh {0}

      - name: Install callaudiod
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/callaudiod*.apk
        shell: alpine.sh --root {0}

      # We need our own versions of wlroots for phoc, so it gets built first
      - name: Build wlroots-hybris
        run: |
          cd wlroots-hybris
          abuild -r
        shell: alpine.sh {0}

      - name: Install wlroots-hybris
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/wlroots*.apk
        shell: alpine.sh --root {0}

      - name: Build feedbackd-hybris
        run: |
          cd feedbackd-hybris
          abuild -r
        shell: alpine.sh {0}

      - name: Install feedbackd-hybris
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/feedbackd*.apk
        shell: alpine.sh --root {0}

      - name: Build libwspcodec
        run: |
          cd libwspcodec
          abuild -r
        shell: alpine.sh {0}

      - name: Install libwspcodec
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/libwspcodec*.apk
        shell: alpine.sh --root {0}

      - name: Build libmce-glib
        run: |
          cd libmce-glib
          abuild -r
        shell: alpine.sh {0}

      - name: Install libmce-glib
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/libmce-glib*.apk
        shell: alpine.sh --root {0}

      - name: Build ofono
        run: |
          cd ofono-hybris
          abuild -r
        shell: alpine.sh {0}

      - name: Install ofono
        run: apk add /home/fakeshell/packages/alphybrisaports/$(arch)/ofono*.apk
        shell: alpine.sh --root {0}

      - name: Build the apk
        run: for i in $(ls); do if [ -d "$i" ]; then cd "$i"; if [ -e APKBUILD ]; then abuild -d; fi; cd ..; fi; done
        shell: alpine.sh {0}

      - name: Make the index
        run: |
          mkdir apkindex -p
          [[ -d ~/packages/alphybrisaports/all/ && -n "$(ls -A ~/packages/alphybrisaports/all/)" ]] && mv ~/packages/alphybrisaports/all/* apkindex
          mv ~/packages/alphybrisaports/$(arch)/*.apk apkindex/
          apk index -vU --allow-untrusted -o apkindex/APKINDEX.tar.gz apkindex/*.apk
          abuild-sign -k /home/fakeshell/work/alphybrisaports/alphybrisaports/keys/fakeshell@bardia.tech-642c0d85.rsa apkindex/APKINDEX.tar.gz
        shell: alpine.sh {0}

      - name: Send everything to the moon!
        run: |
          sudo apt install ssh
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIV_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PUB_KEY }}" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          ls
          pwd
          scp -P 920 -o StrictHostKeyChecking=no apkindex/* root@mirror.bardia.tech:/alphybris/aarch64
          rm ~/.ssh -rf
        shell: bash
