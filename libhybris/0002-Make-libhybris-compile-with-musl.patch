From: Bardia Moshiri <fakeshell@bardia.tech>
diff -Npur a/hybris/common/hooks.c b/hybris/common/hooks.c
--- a/hybris/common/hooks.c
+++ b/hybris/common/hooks.c
@@ -187,6 +187,7 @@
  */
 #define HOOK_TO(symbol, hook) {#symbol, hook, hook}
 
+#ifdef __GLIBC__
 /*
  * symbols that can only be hooked indirectly shall use HOOK
  */
@@ -196,6 +197,7 @@
  *  - if p <= ANDROID_TOP_ADDR_VALUE_MUTEX then it is an android mutex, not one we processed
  *  - if p > VMALLOC_END, then the pointer is not a result of malloc ==> it is an shm offset
  */
+#endif
 
 struct _hook {
     const char *name;
@@ -912,13 +914,16 @@
     }
 
     if (!hybris_is_pointer_in_shm((void*)realcond)) {
+        #ifdef __GLIBC__
         /* Bionic and glibc implementations of pthread_cond_destroy are different.
          * Bionic implementation does not block whereas the glibc implementation
          * requires that there are no threads waiting for the condition variable
          * when it is destroyed and bionic code does not always follow this
          * requirement. To prevent deadlocks reset the reference count of the
          * condition variable. */
+
         realcond->__data.__wrefs = 0;
+        #endif
         ret = pthread_cond_destroy(realcond);
         free(realcond);
     }
@@ -1555,10 +1560,14 @@
 {
     TRACE_HOOK("fp %p pos %p", fp, pos);
 
+#ifdef __GLIBC__
     fpos64_t my_fpos;
     int ret = fgetpos64(_get_actual_fp(fp), &my_fpos);
 
     *pos = my_fpos.__pos;
+#else
+    int ret = fgetpos(_get_actual_fp(fp), pos);
+#endif
 
     return ret;
 }
@@ -1673,11 +1682,15 @@
 {
     TRACE_HOOK("fp %p pos %p", fp, pos);
 
+#ifdef __GLIBC__
     fpos64_t my_fpos;
     my_fpos.__pos = *pos;
     memset(&my_fpos.__state, 0, sizeof(mbstate_t));
 
     return fsetpos64(_get_actual_fp(fp), &my_fpos);
+#else
+    return fsetpos(_get_actual_fp(fp), pos);
+#endif
 }
 
 static long _hybris_hook_ftell(FILE *fp)
@@ -2909,6 +2922,7 @@
     return close(fd);
 }
 
+#ifdef __GLIBC__
 // old property hooks for pre-android 8 approach
 static struct _hook hooks_properties[] = {
     HOOK_INDIRECT(property_get),
@@ -2926,13 +2940,16 @@
     HOOK_INDIRECT(__system_property_wait_any),
     HOOK_INDIRECT(__system_property_find_nth),
 };
+#endif
 
 static struct _hook hooks_common[] = {
 
     HOOK_DIRECT(getenv),
     HOOK_DIRECT_NO_DEBUG(printf),
+#ifdef __GLIBC__
     HOOK_INDIRECT(malloc),
     HOOK_INDIRECT(free),
+#endif
     HOOK_DIRECT_NO_DEBUG(calloc),
     HOOK_DIRECT_NO_DEBUG(free),
     HOOK_DIRECT_NO_DEBUG(realloc),
@@ -2949,7 +2966,9 @@
     HOOK_DIRECT_NO_DEBUG(memchr),
     HOOK_DIRECT_NO_DEBUG(memrchr),
     HOOK_DIRECT(memcmp),
+#ifdef __GLIBC__
     HOOK_INDIRECT(memcpy),
+#endif
     HOOK_DIRECT_NO_DEBUG(memmove),
     HOOK_DIRECT_NO_DEBUG(memset),
     HOOK_DIRECT_NO_DEBUG(memmem),
@@ -2959,8 +2978,10 @@
     HOOK_DIRECT_NO_DEBUG(rindex),
     HOOK_DIRECT_NO_DEBUG(strchr),
     HOOK_DIRECT_NO_DEBUG(strrchr),
+#ifdef __GLIBC__
     HOOK_INDIRECT(strlen),
     HOOK_INDIRECT(strcmp),
+#endif
     HOOK_DIRECT_NO_DEBUG(strcpy),
     HOOK_DIRECT_NO_DEBUG(strcat),
     HOOK_DIRECT_NO_DEBUG(strcasecmp),
@@ -2976,7 +2997,9 @@
     HOOK_DIRECT_NO_DEBUG(strndup),
     HOOK_DIRECT_NO_DEBUG(strncmp),
     HOOK_DIRECT_NO_DEBUG(strncpy),
+#ifdef __GLIBC__
     HOOK_INDIRECT(strtod),
+#endif
     HOOK_DIRECT_NO_DEBUG(strcspn),
     HOOK_DIRECT_NO_DEBUG(strpbrk),
     HOOK_DIRECT_NO_DEBUG(strsep),
@@ -2996,11 +3019,15 @@
 #endif
     /* pthread.h */
     HOOK_DIRECT_NO_DEBUG(getauxval),
+#ifdef __GLIBC__
     HOOK_INDIRECT(gettid),
+#endif
     HOOK_DIRECT_NO_DEBUG(getpid),
     HOOK_DIRECT_NO_DEBUG(pthread_atfork),
+#ifdef __GLIBC__
     HOOK_INDIRECT(pthread_create),
     HOOK_INDIRECT(pthread_kill),
+#endif
     HOOK_DIRECT_NO_DEBUG(pthread_exit),
     HOOK_DIRECT_NO_DEBUG(pthread_join),
     HOOK_DIRECT_NO_DEBUG(pthread_detach),
@@ -3008,6 +3035,7 @@
     HOOK_DIRECT_NO_DEBUG(pthread_equal),
     HOOK_DIRECT_NO_DEBUG(pthread_getschedparam),
     HOOK_DIRECT_NO_DEBUG(pthread_setschedparam),
+#ifdef __GLIBC__
     HOOK_INDIRECT(pthread_mutex_init),
     HOOK_INDIRECT(pthread_mutex_destroy),
     HOOK_INDIRECT(pthread_mutex_lock),
@@ -3015,6 +3043,7 @@
     HOOK_INDIRECT(pthread_mutex_trylock),
     HOOK_INDIRECT(pthread_mutex_lock_timeout_np),
     HOOK_INDIRECT(pthread_mutex_timedlock),
+#endif
     HOOK_DIRECT_NO_DEBUG(pthread_mutexattr_init),
     HOOK_DIRECT_NO_DEBUG(pthread_mutexattr_destroy),
     HOOK_DIRECT_NO_DEBUG(pthread_mutexattr_gettype),
@@ -3027,6 +3056,7 @@
     HOOK_DIRECT_NO_DEBUG(pthread_condattr_destroy),
     HOOK_DIRECT_NO_DEBUG(pthread_condattr_getclock),
     HOOK_DIRECT_NO_DEBUG(pthread_condattr_setclock),
+#ifdef __GLIBC__
     HOOK_INDIRECT(pthread_cond_init),
     HOOK_INDIRECT(pthread_cond_destroy),
     HOOK_INDIRECT(pthread_cond_broadcast),
@@ -3036,11 +3066,15 @@
     HOOK_TO(pthread_cond_timedwait_monotonic, _hybris_hook_pthread_cond_timedwait),
     HOOK_TO(pthread_cond_timedwait_monotonic_np, _hybris_hook_pthread_cond_timedwait),
     HOOK_INDIRECT(pthread_cond_timedwait_relative_np),
+#endif
     HOOK_DIRECT_NO_DEBUG(pthread_key_delete),
+#ifdef __GLIBC__
     HOOK_INDIRECT(pthread_setname_np),
+#endif
     HOOK_DIRECT_NO_DEBUG(pthread_once),
     HOOK_DIRECT_NO_DEBUG(pthread_key_create),
     HOOK_DIRECT(pthread_setspecific),
+#ifdef __GLIBC__
     HOOK_INDIRECT(pthread_getspecific),
     HOOK_INDIRECT(pthread_attr_init),
     HOOK_INDIRECT(pthread_attr_destroy),
@@ -3052,10 +3086,8 @@
     HOOK_INDIRECT(pthread_attr_getschedparam),
     HOOK_INDIRECT(pthread_attr_setstacksize),
     HOOK_INDIRECT(pthread_attr_getstacksize),
-#ifdef __GLIBC__
     HOOK_INDIRECT(pthread_attr_setstackaddr),
     HOOK_INDIRECT(pthread_attr_getstackaddr),
-#endif
     HOOK_INDIRECT(pthread_attr_setstack),
     HOOK_INDIRECT(pthread_attr_getstack),
     HOOK_INDIRECT(pthread_attr_setguardsize),
@@ -3081,6 +3113,7 @@
     /* bionic-only pthread */
     HOOK_TO(__pthread_gettid, _hybris_hook_pthread_gettid_np),
     HOOK_INDIRECT(pthread_gettid_np),
+#endif
     /* stdio.h */
     HOOK_TO(__isthreaded, &_hybris_hook___isthreaded),
     HOOK_TO(__sF, _hybris_hook_sF),
@@ -3094,6 +3127,7 @@
     HOOK_DIRECT_NO_DEBUG(snprintf),
     HOOK_DIRECT_NO_DEBUG(vsprintf),
     HOOK_DIRECT_NO_DEBUG(vsnprintf),
+#ifdef __GLIBC__
     HOOK_INDIRECT(clearerr),
     HOOK_INDIRECT(fclose),
     HOOK_INDIRECT(feof),
@@ -3148,10 +3182,12 @@
     HOOK_INDIRECT(getaddrinfo),
     HOOK_INDIRECT(freeaddrinfo),
     HOOK_DIRECT_NO_DEBUG(gethostbyaddr),
+#endif
     HOOK_DIRECT_NO_DEBUG(gethostbyname),
     HOOK_DIRECT_NO_DEBUG(gethostbyname2),
     HOOK_DIRECT_NO_DEBUG(gethostent),
     HOOK_DIRECT_NO_DEBUG(strftime),
+#ifdef __GLIBC__
     HOOK_INDIRECT(sysconf),
     HOOK_INDIRECT(dlopen),
     HOOK_INDIRECT(dlerror),
@@ -3170,6 +3206,7 @@
     HOOK_INDIRECT(android_init_anonymous_namespace),
     HOOK_INDIRECT(android_dlwarning),
     HOOK_INDIRECT(android_get_exported_namespace),
+#endif
 #if WANT_LINKER_Q
     HOOK_INDIRECT(__loader_shared_globals),
 #endif
@@ -3178,20 +3215,22 @@
     HOOK_DIRECT_NO_DEBUG(fdopendir),
     HOOK_DIRECT_NO_DEBUG(closedir),
     HOOK_DIRECT_NO_DEBUG(__fsetlocking),
+#ifdef __GLIBC__
     HOOK_INDIRECT(readdir),
     HOOK_INDIRECT(readdir_r),
+#endif
     HOOK_DIRECT_NO_DEBUG(rewinddir),
     HOOK_DIRECT_NO_DEBUG(seekdir),
     HOOK_DIRECT_NO_DEBUG(telldir),
     HOOK_DIRECT_NO_DEBUG(dirfd),
 #ifdef __GLIBC__
     HOOK_INDIRECT(scandir),
-#endif
     HOOK_INDIRECT(alphasort),
     HOOK_INDIRECT(versionsort),
     /* fcntl.h */
     HOOK_INDIRECT(open),
     HOOK_INDIRECT(__get_tls_hooks),
+#endif
     HOOK_DIRECT_NO_DEBUG(sscanf),
     HOOK_DIRECT_NO_DEBUG(scanf),
     HOOK_DIRECT_NO_DEBUG(vscanf),
@@ -3219,6 +3258,7 @@
     /* C++ ABI */
     HOOK_DIRECT_NO_DEBUG(__cxa_atexit),
     HOOK_DIRECT_NO_DEBUG(__cxa_finalize),
+#ifdef __GLIBC__
     HOOK_INDIRECT(__cxa_thread_atexit),
     /* sys/prctl.h */
     HOOK_INDIRECT(prctl),
@@ -3233,6 +3273,7 @@
     HOOK_INDIRECT(__fsetlocking),
     HOOK_INDIRECT(_flushlbf),
     HOOK_INDIRECT(__fpurge),
+#endif
 };
 
 static struct _hook hooks_mm[] = {
@@ -3265,11 +3306,13 @@
     HOOK_TO(__hybris_set_errno_internal, _hybris_hook___set_errno),
     HOOK_DIRECT_NO_DEBUG(getservbyname),
     HOOK_DIRECT_NO_DEBUG(close), /* avoid calling fdsan functions */
+#ifdef __GLIBC__
     /* libgen.h */
     HOOK_INDIRECT(basename),
     HOOK_INDIRECT(dirname),
     /* locale.h */
     HOOK_DIRECT(newlocale),
+#endif
     HOOK_DIRECT(freelocale),
     HOOK_DIRECT(duplocale),
     HOOK_DIRECT(uselocale),
@@ -3290,7 +3333,6 @@
     HOOK_DIRECT_NO_DEBUG(wmemset),
 #ifdef __GLIBC__
     HOOK_DIRECT_NO_DEBUG(wmempcpy),
-#endif
     HOOK_INDIRECT(fputws),
     // It's enough to hook vfwprintf here as fwprintf will call it with a
     // proper va_list in place so we don't have to handle this here.
@@ -3299,13 +3341,16 @@
     HOOK_INDIRECT(putwc),
     HOOK_INDIRECT(fgetwc),
     HOOK_INDIRECT(getwc),
+#endif
     /* sched.h */
     HOOK_DIRECT_NO_DEBUG(clone),
     /* mntent.h */
     HOOK_DIRECT(setmntent),
+#ifdef __GLIBC__
     HOOK_INDIRECT(getmntent),
     HOOK_INDIRECT(getmntent_r),
     HOOK_INDIRECT(endmntent),
+#endif
     /* stdlib.h */
     HOOK_DIRECT_NO_DEBUG(system),
     /* pwd.h */
@@ -3350,6 +3395,7 @@
 #endif
 };
 
+#ifdef __GLIBC__
 static struct _hook hooks_n[] = {
     /* stdio.h */
     HOOK_INDIRECT(fgetpos64),
@@ -3363,7 +3409,9 @@
     HOOK_INDIRECT(scandirat),
     HOOK_TO(scandirat64, _hybris_hook_scandirat),
 };
+#endif
 
+#ifdef __GLIBC__
 static struct _hook hooks_p[] = {
     /* stdio.h */
     HOOK_INDIRECT(fflush_unlocked),
@@ -3377,6 +3425,7 @@
     HOOK_INDIRECT(android_fdsan_exchange_owner_tag),
     HOOK_INDIRECT(android_fdsan_close_with_tag),
 };
+#endif
 
 static int hook_cmp(const void *a, const void *b)
 {
@@ -3498,11 +3547,15 @@
 
     if (!sorted)
     {
+#ifdef __GLIBC__
         qsort(hooks_properties, HOOKS_SIZE(hooks_properties), sizeof(hooks_properties[0]), hook_cmp);
+#endif
         qsort(hooks_common, HOOKS_SIZE(hooks_common), sizeof(hooks_common[0]), hook_cmp);
         qsort(hooks_mm, HOOKS_SIZE(hooks_mm), sizeof(hooks_mm[0]), hook_cmp);
+#ifdef __GLIBC__
         qsort(hooks_n, HOOKS_SIZE(hooks_n), sizeof(hooks_n[0]), hook_cmp);
         qsort(hooks_p, HOOKS_SIZE(hooks_p), sizeof(hooks_p[0]), hook_cmp);
+#endif
         sorted = 1;
     }
 
@@ -3510,6 +3563,8 @@
     key.name = sym;
     sdk_version = get_android_sdk_version();
 
+#ifdef __GLIBC__
+
 #if defined(WANT_LINKER_O) || defined(WANT_LINKER_Q)
     if (sdk_version > 27)
         found = bsearch(&key, hooks_p, HOOKS_SIZE(hooks_p), sizeof(hooks_p[0]), hook_cmp);
@@ -3518,15 +3573,21 @@
     if (!found && sdk_version > 23)
         found = bsearch(&key, hooks_n, HOOKS_SIZE(hooks_n), sizeof(hooks_n[0]), hook_cmp);
 #endif
+
+#endif
+
 #if defined(WANT_LINKER_MM) || defined(WANT_LINKER_N) || defined(WANT_LINKER_O) || defined(WANT_LINKER_Q)
     if (!found && sdk_version > 21)
         found = bsearch(&key, hooks_mm, HOOKS_SIZE(hooks_mm), sizeof(hooks_mm[0]), hook_cmp);
 #endif
+
+#ifdef __GLIBC__
     // make sure to skip the property hooks only when o.so is actually loaded
     // since for testing and we sometimes set things like 99 as sdk version.
     // The o linker is loaded when sdk_version >= 27 and exists.
     if (!found && sdk_version < 27)
         found = bsearch(&key, hooks_properties, HOOKS_SIZE(hooks_properties), sizeof(hooks_properties[0]), hook_cmp);
+#endif
 
     if (!found)
         found = bsearch(&key, hooks_common, HOOKS_SIZE(hooks_common), sizeof(hooks_common[0]), hook_cmp);
@@ -3978,4 +4039,3 @@
 {
     return android_get_exported_namespace(name);
 }
-
